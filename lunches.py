import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

# –í–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

TOKEN = "7316306574:AAFl2Gsp8nDcQ5NKRRk8GWiEcRUdkI8Ua5A"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN)
dp = Dispatcher()
dp["bot"] = bot  # –ü–µ—Ä–µ–¥–∞—á–∞ –±–æ—Ç–∞ –≤ Dispatcher

# üîπ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
# üîπ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçΩ –û–±—Ä–∞—Ç–∏ –∫—É—Ö–Ω—é"), KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞–Ω —Ä–∞—Ö—É–Ω–∫—É")]
    ],
    resize_keyboard=True
)


# üîπ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫—É—Ö–æ–Ω—å
complex_menus = {
    "asian": {
        "name": "ü•¢ –¢–∞–π—Å—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Golden Dragon",
        "street": "–≤—É–ª. –ö–æ—Ä–∑–æ, 17",
        "menu": "–¢–æ–º –Ø–º –∑ –∫—Ä–µ–≤–µ—Ç–∫–æ—é + –ü–∞–¥ —Ç–∞–π –∑ –∫–∞–ª—å–º–∞—Ä–∞–º–∏ + –ö–∞–Ω–æ–º –±—ñ–∞–Ω–≥ (–¥–µ—Å–µ—Ä—Ç) + –¢—Ä–æ–ø—ñ—á–Ω–∏–π –ª–∏–º–æ–Ω–∞–¥",
        "allergens": "–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —Ç–æ–º–∞—Ç–Ω–∞ –ø–∞—Å—Ç–∞, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏"
    },
    "mexican": {
        "name": "üåÆ –ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "El Sombrero",
        "street": "–≤—É–ª. –í–æ–ª–æ—à–∏–Ω–∞, 12",
        "menu": "–ß–∏–ª—ñ –∫–æ–Ω –∫–∞—Ä–Ω–µ + –¢–∞–∫–æ –∑ –∫—É—Ä–∫–æ—é + –ß—É—Ä–æ—Å —Ä–µ–ª–ª–µ–Ω–æ (–¥–µ—Å–µ—Ä—Ç) + –ê–∫–≤–∞ —Ñ—Ä–µ—Å–∫–∞ (—Ñ—Ä—É–∫—Ç–æ–≤–∏–π –Ω–∞–ø—ñ–π)",
        "allergens": "–ú‚Äô—è—Å–æ, –≥–ª—é—Ç–µ–Ω, —è–π—Ü—è"
    },
    "ukrainian": {
        "name": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "–°–º–∞–∫–æ—Ç–∞",
        "street": "–ø–ª. –ö–æ—Ä—è—Ç–æ–≤–∏—á–∞, 5",
        "menu": "–ë–æ—Ä—â + –î–µ—Ä—É–Ω–∏ –∑ –≥—Ä–∏–±–Ω–∏–º —Å–æ—É—Å–æ–º + –°–∏—Ä–Ω–∞ –∑–∞–ø—ñ–∫–∞–Ω–∫–∞ + –£–∑–≤–∞—Ä",
        "allergens": "–¢–æ–º–∞—Ç–∏, –º‚Äô—è—Å–æ, –≥—Ä–∏–±–∏, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —Ü–∏—Ç—Ä—É—Å–∏"
    },
    "italian": {
        "name": "üçù –Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Pasta Bella",
        "street": "–≤—É–ª. –î–æ–≤–∂–µ–Ω–∫–∞, 22",
        "menu": "–ú—ñ–Ω–µ—Å—Ç—Ä–æ–Ω–µ + –ö–∞–Ω–µ–ª–æ–Ω—ñ –∑ —Ñ–∞—Ä—à–µ–º + –ü–∞–Ω–Ω–∞ –∫–æ—Ç—Ç–∞ –∑ —Ñ—Ä—É–∫—Ç–æ–≤–∏–º —Å–æ—É—Å–æ–º + –¶–∏—Ç—Ä—É—Å–æ–≤–∏–π –ª–∏–º–æ–Ω–∞–¥",
        "allergens": "–¢–æ–º–∞—Ç–∏, –≥–ª—é—Ç–µ–Ω, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, –º‚Äô—è—Å–æ, —Ü–∏—Ç—Ä—É—Å–∏"
    },
    "american": {
        "name": "üçî –§–∞—Å—Ç—Ñ—É–¥",
        "restaurant": "Burger Town",
        "street": "–≤—É–ª. –®–≤–∞–±—Å—å–∫–∞, 33",
        "menu": "–ß–∏–∑–±—É—Ä–≥–µ—Ä + –ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ + –ú–æ—Ä–æ–∑–∏–≤–æ –∑ —Ñ—Ä—É–∫—Ç–æ–≤–∏–º —Ç–æ–ø—ñ–Ω–≥–æ–º + –ì–∞–∑–æ–≤–∞–Ω–∏–π –Ω–∞–ø—ñ–π",
        "allergens": "–¢–æ–º–∞—Ç–∏, –≥—ñ—Ä—á–∏—Ü—è, –≥–ª—é—Ç–µ–Ω, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, –º‚Äô—è—Å–æ"
    },
    "french": {
        "name": "ü•ñ –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Le Petit Bistro",
        "street": "–≤—É–ª. –ì—Ä—É—à–µ–≤—Å—å–∫–æ–≥–æ, 8",
        "menu": "–í—ñ—à—ñ—Å—É–∞–∑ (—Ü–∏–±—É–ª–µ–≤–∏–π —Å—É–ø) + –ë—É—Ä–≥–∏–Ω—å–π–æ–Ω –∑ —è–ª–æ–≤–∏—á–∏–Ω–∏ + –ü–ª–∞–≤–∞—é—á–∏–π –æ—Å—Ç—Ä—ñ–≤ (–¥–µ—Å–µ—Ä—Ç) + –Ø–≥—ñ–¥–Ω–∏–π –ª–∏–º–æ–Ω–∞–¥",
        "allergens": "–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, –º‚Äô—è—Å–æ, –≥—Ä–∏–±–∏, —Ç–æ–º–∞—Ç–∏, –≥–ª—é—Ç–µ–Ω, —è–π—Ü—è"
    },
    "indian": {
        "name": "üçõ –Ü–Ω–¥—ñ–π—Å—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Curry House",
        "street": "–≤—É–ª. –ö–∞–ø—É—à–∞–Ω—Å—å–∫–∞, 14",
        "menu": "–î—Ö–∞–ª (—Å—É–ø —ñ–∑ —Å–æ—á–µ–≤–∏—Ü—ñ) + –¢—ñ–∫–∫–∞ –º–∞—Å–∞–ª–∞ + –ì—É–ª–∞–± –¥–∂–∞–º—É–Ω (–¥–µ—Å–µ—Ä—Ç) + –õ–∞—Å—Å—ñ –∑ –º–∞–Ω–≥–æ",
        "allergens": "–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —Ç–æ–º–∞—Ç–∏, –º‚Äô—è—Å–æ, —Ü–∏—Ç—Ä—É—Å–∏, –≥–ª—é—Ç–µ–Ω"
    },
    "japanese": {
        "name": "üç£ –Ø–ø–æ–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Sakura Sushi",
        "street": "–≤—É–ª. –§–µ–¥–∏–Ω—Ü—è, 19",
        "menu": "–ú—ñ—Å–æ + “ê—å–æ–¥–∑–µ –∑—ñ —Å–≤–∏–Ω–∏–Ω–æ—é + –¢–∞—è–∫—ñ (–¥–µ—Å–µ—Ä—Ç) + –Ø–ø–æ–Ω—Å—å–∫–∞ –≥–∞–∑–æ–≤–∞–Ω–∞ –≤–æ–¥–∞",
        "allergens": "–°–æ—î–≤—ñ –±–æ–±–∏, –≥–ª—é—Ç–µ–Ω, –∫—É–Ω–∂—É—Ç, –º‚Äô—è—Å–æ, —è–π—Ü—è"
    },
    "greek": {
        "name": "ü•ó –ì—Ä–µ—Ü—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Aegean Breeze",
        "street": "–≤—É–ª. –õ–µ–≥–æ—Ü—å–∫–æ–≥–æ, 27",
        "menu": "–°–æ—á–µ–≤–∏—á–Ω–∏–π —Å—É–ø + –ì—ñ—Ä–æ—Å + –ì–∞–ª–∞–∫—Ç–æ–±—É—Ä–µ–∫–æ (–¥–µ—Å–µ—Ä—Ç) + –ö–∞–Ω–µ–ª–∞–¥–∞",
        "allergens": "–ì–ª—é—Ç–µ–Ω, –º‚Äô—è—Å–æ, —Ç–æ–º–∞—Ç–∏, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —Ü–∏—Ç—Ä—É—Å–∏"
    },
    "turkish": {
        "name": "ü•ô –¢—É—Ä–µ—Ü—å–∫–∞ –∫—É—Ö–Ω—è",
        "restaurant": "Istanbul Grill",
        "street": "–≤—É–ª. –ì–∞–≥–∞—Ä—ñ–Ω–∞, 5",
        "menu": "–Ø–π–ª–∞ —á–æ—Ä–±–∞—Å–∏ (–π–æ–≥—É—Ä—Ç–æ–≤–∏–π —Å—É–ø) + –î–æ–ª–º–∞ + –ü–∞—Ö–ª–∞–≤–∞ (–¥–µ—Å–µ—Ä—Ç) + –ì—Ä–∞–Ω–∞—Ç–æ–≤–∏–π —á–∞–π",
        "allergens": "–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–π—Ü—è, –≥–ª—é—Ç–µ–Ω, –º‚Äô—è—Å–æ, –≥–æ—Ä—ñ—Ö–∏, —Ü–∏—Ç—Ä—É—Å–∏"
    }
}

# üîπ –ë–∞–∑–∞ —Å—Ç—Ä–∞–≤
dishes = {
    "asian": [{"name": "–†–∞–º–µ–Ω", "allergens": "–ì–ª—é—Ç–µ–Ω, —Å–æ—è"}, {"name": "–°—É—à—ñ-—Å–µ—Ç", "allergens": "–†–∏–±–∞"}],
    "mexican": [{"name": "–¢–∞–∫–æ", "allergens": "–ì–ª—é—Ç–µ–Ω, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏"}],
    "ukrainian": [{"name": "–ë–æ—Ä—â", "allergens": "–°–µ–ª–µ—Ä–∞"}],
    "italian": [{"name": "–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "allergens": "–ì–ª—é—Ç–µ–Ω, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏"}],
    "fastfood": [{"name": "–ß—ñ–∑–±—É—Ä–≥–µ—Ä", "allergens": "–ì–ª—é—Ç–µ–Ω, —Å–∏—Ä"}],
    "french": [{"name": "–ö—Ä—É–∞—Å–∞–Ω", "allergens": "–ì–ª—é—Ç–µ–Ω, –º–∞—Å–ª–æ"}],
    "indian": [{"name": "–ö–∞—Ä—ñ –∑ –∫—É—Ä–∫–æ—é", "allergens": "–ì–æ—Å—Ç—Ä—ñ —Å–ø–µ—Ü—ñ—ó"}],
    "japanese": [{"name": "–°—É—à—ñ-—Å–µ—Ç", "allergens": "–†–∏–±–∞, –≥–ª—é—Ç–µ–Ω"}],
    "greek": [{"name": "–ì—Ä–µ—Ü—å–∫–∏–π —Å–∞–ª–∞—Ç", "allergens": "–°–∏—Ä, –æ–ª–∏–≤–∫–æ–≤–∞ –æ–ª—ñ—è"}],
    "turkish": [{"name": "–ö–µ–±–∞–±", "allergens": "–ú‚Äô—è—Å–æ"}]
}

# üîπ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —Å–º–∞—á–Ω–æ –ø–æ–æ–±—ñ–¥–∞—Ç–∏üòâ! –û–±–µ—Ä–∏ —Ç–∏–ø –∫—É—Ö–Ω—ñ –∞–±–æ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:", reply_markup=menu_keyboard)

# üîπ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "üçΩ –û–±—Ä–∞—Ç–∏ –∫—É—Ö–Ω—é"
@dp.message(lambda message: message.text == "üçΩ –û–±—Ä–∞—Ç–∏ –∫—É—Ö–Ω—é")
async def choose_cuisine(message: types.Message):
    buttons = [[InlineKeyboardButton(text=value["name"], callback_data=f"cuisine_{key}")] for key, value in complex_menus.items()]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—É—Ö–Ω—ñ:", reply_markup=keyboard)


# üîπ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫—É—Ö–Ω—ñ
@dp.callback_query(lambda c: c.data.startswith("cuisine_"))
async def select_cuisine(callback_query: types.CallbackQuery):
    cuisine_key = callback_query.data.split("_")[1]

    if cuisine_key not in complex_menus:
        await callback_query.answer("‚ö†Ô∏è –¶—è –∫—É—Ö–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)
        return

    selected_menu = complex_menus[cuisine_key]
    price = random.randint(149, 499)  # üî• –í–∏–ø–∞–¥–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –≤—ñ–¥ 149 –¥–æ 499 –≥—Ä–Ω

    response = (
        f"üçΩ {selected_menu['name']}\n"
        f"üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω: {selected_menu['restaurant']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {selected_menu['street']}\n"
        f"üìú –ú–µ–Ω—é: {selected_menu['menu']}\n"
        f"‚ö†Ô∏è –ê–ª–µ—Ä–≥–µ–Ω–∏: {selected_menu['allergens']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω"
    )

    await callback_query.answer()
    await callback_query.message.answer(response)




# üîπ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí≥ –û–ø–ª–∞—Ç–∞"
@dp.message(lambda message: message.text == "üí≥ –û–ø–ª–∞—Ç–∞")
async def payment_info(message: types.Message):
    await message.answer("üí∞ –î–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–∞—Ä—Ç–∫—É –∞–±–æ –≥–æ—Ç—ñ–≤–∫—É –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ.\n\n"
                         "üìç –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É, –¥–µ –≤–∏ –æ–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–≤—É.")

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# üîπ –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–≤–µ–¥–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É)
class AccountState(StatesGroup):
    entering_balance = State()

# üîπ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞–Ω —Ä–∞—Ö—É–Ω–∫—É"
@dp.message(lambda message: message.text == "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞–Ω —Ä–∞—Ö—É–Ω–∫—É")
async def check_balance(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    balance = user_data.get("balance")  # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å

    if balance is not None:
        # –Ø–∫—â–æ –±–∞–ª–∞–Ω—Å —î, –≤–∏–≤–æ–¥–∏–º–æ –π–æ–≥–æ —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–º—ñ–Ω–∏—Ç–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data="change_balance")]]
        )
        await message.answer(f"üí≥ –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω", reply_markup=keyboard)
    else:
        # –Ø–∫—â–æ –±–∞–ª–∞–Ω—Å—É –Ω–µ–º–∞—î, –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –π–æ–≥–æ
        await state.set_state(AccountState.entering_balance)
        await message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≥—Ä–æ—à–µ–π, —è–∫—ñ —É –≤–∞—Å —î –Ω–∞ –æ–±—ñ–¥:")

# üîπ –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É
@dp.callback_query(lambda c: c.data == "change_balance")
async def change_balance(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AccountState.entering_balance)  # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è
    await callback_query.message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å:")
    await callback_query.answer()

# üîπ –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
@dp.message(AccountState.entering_balance)
async def save_balance(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ —ñ —Å–∏–º–≤–æ–ª—ñ–≤!")
        return

    balance = int(message.text)
    await state.update_data(balance=balance)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å —É –ø–∞–º‚Äô—è—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.set_state(None)  # –í–ê–ñ–õ–ò–í–û: –í–∏—Ö–æ–¥–∏–º–æ –∑—ñ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è, —â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª—é–≤–∞–ª–æ—Å—è

    await message.answer(f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {balance} –≥—Ä–Ω")

# üîπ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=menu_keyboard)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
